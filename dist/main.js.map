{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 815a952f428550b4608d","webpack:///./src/utils/tree-data-utils.js","webpack:///external \"react\"","webpack:///external \"prop-types\"","webpack:///./src/utils/classnames.js","webpack:///./src/utils/default-handlers.js","webpack:///./src/utils/memoized-tree-data-utils.js","webpack:///./src/index.js","webpack:///./src/react-sortable-tree.js","webpack:///external \"react-virtualized\"","webpack:///external \"lodash.isequal\"","webpack:///external \"react-dnd-scrollzone\"","webpack:///./node_modules/react-virtualized/styles.css","webpack:///./src/tree-node.js","webpack:///./src/tree-node.css","webpack:///./src/node-renderer-default.js","webpack:///./src/node-renderer-default.css","webpack:///./src/tree-placeholder.js","webpack:///./src/placeholder-renderer-default.js","webpack:///./src/placeholder-renderer-default.css","webpack:///./src/utils/generic-utils.js","webpack:///./src/utils/dnd-manager.js","webpack:///external \"react-dnd\"","webpack:///external \"react-dnd-html5-backend\"","webpack:///external \"react-dom\"","webpack:///./src/react-sortable-tree.css"],"names":["getDescendantCount","getVisibleNodeCount","getVisibleNodeInfoAtIndex","walk","map","toggleExpandedForAll","changeNodeAtPath","removeNodeAtPath","removeNode","getNodeAtPath","addNodeUnderParent","insertNode","getFlatDataFromTree","getTreeFromFlatData","isDescendant","getDepth","find","getNodeDataAtTreeIndexOrNextIndex","targetIndex","node","currentIndex","getNodeKey","path","lowerSiblingCounts","ignoreCollapsed","isPseudoRoot","selfPath","treeIndex","children","expanded","nextIndex","childIndex","childCount","length","i","result","walkDescendants","callback","parentNode","selfInfo","callbackResult","mapDescendants","nextNode","child","mapResult","treeData","traverse","reduce","total","currentNode","index","newNode","RESULT_MISS","currentTreeIndex","pathIndex","Error","nextTreeIndex","slice","removedNode","removedTreeIndex","nextTreeData","foundNodeInfo","err","parentKey","expandParent","insertedTreeIndex","hasBeenAdded","changedTreeData","key","addNodeAtDepthAndIndex","targetDepth","minimumTreeIndex","isLastChild","currentDepth","n","extraNodeProps","parentPath","insertIndex","pathFragment","newChildren","depth","insertResult","flattened","push","nodeInfo","flatData","getKey","id","getParentKey","parentId","rootKey","childrenToParents","forEach","trav","parent","older","younger","some","deepest","Math","max","searchQuery","searchMethod","searchFocusOffset","expandAllMatchPaths","expandFocusMatchPaths","matchCount","matches","isSelfMatch","hasFocusMatch","extraInfo","hasChildren","match","classnames","classes","filter","Boolean","join","defaultGetNodeKey","defaultSearchMethod","getReactElementText","props","stringSearch","String","indexOf","memoize","savedArgsArray","savedKeysArray","savedResult","keysArray","Object","keys","args","sort","argsArray","arg","f","memoizedInsertNode","memoizedGetFlatDataFromTree","memoizedGetDescendantCount","SortableTreeWithoutDndContext","treeIdCounter","mergeTheme","merged","style","theme","innerStyle","reactVirtualizedListProps","overridableDefaults","nodeContentRenderer","placeholderRenderer","rowHeight","scaffoldBlockPxWidth","slideRegionSize","treeNodeRenderer","propKey","ReactSortableTree","dndType","isVirtualized","dndManager","treeId","wrapSource","treePlaceholderRenderer","wrapPlaceholder","wrapTarget","scrollZoneVirtualList","vStrength","hStrength","state","draggingTreeData","draggedNode","draggedMinimumTreeIndex","draggedDepth","searchMatches","searchFocusTreeIndex","dragging","toggleChildrenVisibility","bind","moveNode","startDrag","dragHover","endDrag","drop","handleDndMonitorChange","loadLazyChildren","search","clearMonitorSubscription","context","dragDropManager","getMonitor","subscribeToStateChange","nextProps","ignoreOneTreeUpdate","setState","prevProps","prevState","onDragStateChanged","isDragging","monitor","targetNode","onChange","onVisibilityToggle","prevPath","prevTreeIndex","nextParentNode","onMoveNode","nextPath","seekIndex","expand","singleSearch","searchFinishCallback","onlyExpandSearchedNodes","expandedTreeData","addedResult","rows","getRows","expandedParentPath","dropResult","resetTree","shouldCopy","shouldCopyOnOutsideDrop","copyNode","loadCollapsedLazyChildren","done","oldNode","childrenArray","listIndex","getPrevRow","matchKeys","swapFrom","swapDepth","swapLength","parentGrid","canDrag","generateNodeProps","TreeNodeRenderer","NodeContentRenderer","nodeKey","isSearchMatch","isSearchFocus","callbackParams","nodeProps","rowCanDrag","sharedProps","className","swapTo","scrollToInfo","scrollToIndex","containerStyle","list","Placeholder","PlaceholderContent","height","ScrollZoneVirtualList","width","scrollTop","undefined","rowStyle","renderRow","row","propTypes","arrayOf","object","isRequired","shape","string","oneOfType","number","func","maxDepth","any","bool","canDrop","defaultProps","contextTypes","wrapRoot","TreeNode","connectDropTarget","isOver","otherProps","scaffoldBlockCount","scaffold","lowerSiblingCount","lineClass","highlightLineClass","left","NodeRendererDefault","connectDragPreview","connectDragSource","title","subtitle","buttons","didDrop","nodeTitle","nodeSubtitle","handle","Array","_","dropEffect","isDraggedDescendant","isLandingPadActive","opacity","btn","TreePlaceholder","PlaceholderRendererDefault","slideRows","fromIndex","toIndex","count","rowsWithoutMoved","DndManager","treeRef","dropTargetProps","component","dropTargetDepth","rowAbove","min","blocksOffset","dragSourceInitialDepth","getItem","relativePosition","getBoundingClientRect","leftShift","getSourceClientOffset","x","round","getDifferenceFromInitialOffset","draggedChildDepth","abovePath","aboveNode","getTargetDepth","customCanDrop","prevParent","nextParent","el","nodeDragSource","beginDrag","getDropResult","dropTargetNode","nodeDragSourcePropInjection","connect","dragSource","dragPreview","nodeDropTarget","hover","needsRedraw","nodeDropTargetPropInjection","dragged","dropTarget","placeholderDropTarget","placeholderPropInjection"],"mappings":"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","file":"dist/main.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ReactSortableTree\"] = factory();\n\telse\n\t\troot[\"ReactSortableTree\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 6);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 815a952f428550b4608d","/**\n * Performs a depth-first traversal over all of the node descendants,\n * incrementing currentIndex by 1 for each\n */\nfunction getNodeDataAtTreeIndexOrNextIndex({\n  targetIndex,\n  node,\n  currentIndex,\n  getNodeKey,\n  path = [],\n  lowerSiblingCounts = [],\n  ignoreCollapsed = true,\n  isPseudoRoot = false,\n}) {\n  // The pseudo-root is not considered in the path\n  const selfPath = !isPseudoRoot\n    ? [...path, getNodeKey({ node, treeIndex: currentIndex })]\n    : [];\n\n  // Return target node when found\n  if (currentIndex === targetIndex) {\n    return {\n      node,\n      lowerSiblingCounts,\n      path: selfPath,\n    };\n  }\n\n  // Add one and continue for nodes with no children or hidden children\n  if (!node.children || (ignoreCollapsed && node.expanded !== true)) {\n    return { nextIndex: currentIndex + 1 };\n  }\n\n  // Iterate over each child and their descendants and return the\n  // target node if childIndex reaches the targetIndex\n  let childIndex = currentIndex + 1;\n  const childCount = node.children.length;\n  for (let i = 0; i < childCount; i += 1) {\n    const result = getNodeDataAtTreeIndexOrNextIndex({\n      ignoreCollapsed,\n      getNodeKey,\n      targetIndex,\n      node: node.children[i],\n      currentIndex: childIndex,\n      lowerSiblingCounts: [...lowerSiblingCounts, childCount - i - 1],\n      path: selfPath,\n    });\n\n    if (result.node) {\n      return result;\n    }\n\n    childIndex = result.nextIndex;\n  }\n\n  // If the target node is not found, return the farthest traversed index\n  return { nextIndex: childIndex };\n}\n\nexport function getDescendantCount({ node, ignoreCollapsed = true }) {\n  return (\n    getNodeDataAtTreeIndexOrNextIndex({\n      getNodeKey: () => {},\n      ignoreCollapsed,\n      node,\n      currentIndex: 0,\n      targetIndex: -1,\n    }).nextIndex - 1\n  );\n}\n\n/**\n * Walk all descendants of the given node, depth-first\n *\n * @param {Object} args - Function parameters\n * @param {function} args.callback - Function to call on each node\n * @param {function} args.getNodeKey - Function to get the key from the nodeData and tree index\n * @param {boolean} args.ignoreCollapsed - Ignore children of nodes without `expanded` set to `true`\n * @param {boolean=} args.isPseudoRoot - If true, this node has no real data, and only serves\n *                                        as the parent of all the nodes in the tree\n * @param {Object} args.node - A tree node\n * @param {Object=} args.parentNode - The parent node of `node`\n * @param {number} args.currentIndex - The treeIndex of `node`\n * @param {number[]|string[]} args.path - Array of keys leading up to node to be changed\n * @param {number[]} args.lowerSiblingCounts - An array containing the count of siblings beneath the\n *                                             previous nodes in this path\n *\n * @return {number|false} nextIndex - Index of the next sibling of `node`,\n *                                    or false if the walk should be terminated\n */\nfunction walkDescendants({\n  callback,\n  getNodeKey,\n  ignoreCollapsed,\n  isPseudoRoot = false,\n  node,\n  parentNode = null,\n  currentIndex,\n  path = [],\n  lowerSiblingCounts = [],\n}) {\n  // The pseudo-root is not considered in the path\n  const selfPath = isPseudoRoot\n    ? []\n    : [...path, getNodeKey({ node, treeIndex: currentIndex })];\n  const selfInfo = isPseudoRoot\n    ? null\n    : {\n        node,\n        parentNode,\n        path: selfPath,\n        lowerSiblingCounts,\n        treeIndex: currentIndex,\n      };\n\n  if (!isPseudoRoot) {\n    const callbackResult = callback(selfInfo);\n\n    // Cut walk short if the callback returned false\n    if (callbackResult === false) {\n      return false;\n    }\n  }\n\n  // Return self on nodes with no children or hidden children\n  if (\n    !node.children ||\n    (node.expanded !== true && ignoreCollapsed && !isPseudoRoot)\n  ) {\n    return currentIndex;\n  }\n\n  // Get all descendants\n  let childIndex = currentIndex;\n  const childCount = node.children.length;\n  if (typeof node.children !== 'function') {\n    for (let i = 0; i < childCount; i += 1) {\n      childIndex = walkDescendants({\n        callback,\n        getNodeKey,\n        ignoreCollapsed,\n        node: node.children[i],\n        parentNode: isPseudoRoot ? null : node,\n        currentIndex: childIndex + 1,\n        lowerSiblingCounts: [...lowerSiblingCounts, childCount - i - 1],\n        path: selfPath,\n      });\n\n      // Cut walk short if the callback returned false\n      if (childIndex === false) {\n        return false;\n      }\n    }\n  }\n\n  return childIndex;\n}\n\n/**\n * Perform a change on the given node and all its descendants, traversing the tree depth-first\n *\n * @param {Object} args - Function parameters\n * @param {function} args.callback - Function to call on each node\n * @param {function} args.getNodeKey - Function to get the key from the nodeData and tree index\n * @param {boolean} args.ignoreCollapsed - Ignore children of nodes without `expanded` set to `true`\n * @param {boolean=} args.isPseudoRoot - If true, this node has no real data, and only serves\n *                                        as the parent of all the nodes in the tree\n * @param {Object} args.node - A tree node\n * @param {Object=} args.parentNode - The parent node of `node`\n * @param {number} args.currentIndex - The treeIndex of `node`\n * @param {number[]|string[]} args.path - Array of keys leading up to node to be changed\n * @param {number[]} args.lowerSiblingCounts - An array containing the count of siblings beneath the\n *                                             previous nodes in this path\n *\n * @return {number|false} nextIndex - Index of the next sibling of `node`,\n *                                    or false if the walk should be terminated\n */\nfunction mapDescendants({\n  callback,\n  getNodeKey,\n  ignoreCollapsed,\n  isPseudoRoot = false,\n  node,\n  parentNode = null,\n  currentIndex,\n  path = [],\n  lowerSiblingCounts = [],\n}) {\n  const nextNode = { ...node };\n\n  // The pseudo-root is not considered in the path\n  const selfPath = isPseudoRoot\n    ? []\n    : [...path, getNodeKey({ node: nextNode, treeIndex: currentIndex })];\n  const selfInfo = {\n    node: nextNode,\n    parentNode,\n    path: selfPath,\n    lowerSiblingCounts,\n    treeIndex: currentIndex,\n  };\n\n  // Return self on nodes with no children or hidden children\n  if (\n    !nextNode.children ||\n    (nextNode.expanded !== true && ignoreCollapsed && !isPseudoRoot)\n  ) {\n    return {\n      treeIndex: currentIndex,\n      node: callback(selfInfo),\n    };\n  }\n\n  // Get all descendants\n  let childIndex = currentIndex;\n  const childCount = nextNode.children.length;\n  if (typeof nextNode.children !== 'function') {\n    nextNode.children = nextNode.children.map((child, i) => {\n      const mapResult = mapDescendants({\n        callback,\n        getNodeKey,\n        ignoreCollapsed,\n        node: child,\n        parentNode: isPseudoRoot ? null : nextNode,\n        currentIndex: childIndex + 1,\n        lowerSiblingCounts: [...lowerSiblingCounts, childCount - i - 1],\n        path: selfPath,\n      });\n      childIndex = mapResult.treeIndex;\n\n      return mapResult.node;\n    });\n  }\n\n  return {\n    node: callback(selfInfo),\n    treeIndex: childIndex,\n  };\n}\n\n/**\n * Count all the visible (expanded) descendants in the tree data.\n *\n * @param {!Object[]} treeData - Tree data\n *\n * @return {number} count\n */\nexport function getVisibleNodeCount({ treeData }) {\n  const traverse = node => {\n    if (\n      !node.children ||\n      node.expanded !== true ||\n      typeof node.children === 'function'\n    ) {\n      return 1;\n    }\n\n    return (\n      1 +\n      node.children.reduce(\n        (total, currentNode) => total + traverse(currentNode),\n        0\n      )\n    );\n  };\n\n  return treeData.reduce(\n    (total, currentNode) => total + traverse(currentNode),\n    0\n  );\n}\n\n/**\n * Get the <targetIndex>th visible node in the tree data.\n *\n * @param {!Object[]} treeData - Tree data\n * @param {!number} targetIndex - The index of the node to search for\n * @param {!function} getNodeKey - Function to get the key from the nodeData and tree index\n *\n * @return {{\n *      node: Object,\n *      path: []string|[]number,\n *      lowerSiblingCounts: []number\n *  }|null} node - The node at targetIndex, or null if not found\n */\nexport function getVisibleNodeInfoAtIndex({\n  treeData,\n  index: targetIndex,\n  getNodeKey,\n}) {\n  if (!treeData || treeData.length < 1) {\n    return null;\n  }\n\n  // Call the tree traversal with a pseudo-root node\n  const result = getNodeDataAtTreeIndexOrNextIndex({\n    targetIndex,\n    getNodeKey,\n    node: {\n      children: treeData,\n      expanded: true,\n    },\n    currentIndex: -1,\n    path: [],\n    lowerSiblingCounts: [],\n    isPseudoRoot: true,\n  });\n\n  if (result.node) {\n    return result;\n  }\n\n  return null;\n}\n\n/**\n * Walk descendants depth-first and call a callback on each\n *\n * @param {!Object[]} treeData - Tree data\n * @param {!function} getNodeKey - Function to get the key from the nodeData and tree index\n * @param {function} callback - Function to call on each node\n * @param {boolean=} ignoreCollapsed - Ignore children of nodes without `expanded` set to `true`\n *\n * @return void\n */\nexport function walk({\n  treeData,\n  getNodeKey,\n  callback,\n  ignoreCollapsed = true,\n}) {\n  if (!treeData || treeData.length < 1) {\n    return;\n  }\n\n  walkDescendants({\n    callback,\n    getNodeKey,\n    ignoreCollapsed,\n    isPseudoRoot: true,\n    node: { children: treeData },\n    currentIndex: -1,\n    path: [],\n    lowerSiblingCounts: [],\n  });\n}\n\n/**\n * Perform a depth-first transversal of the descendants and\n *  make a change to every node in the tree\n *\n * @param {!Object[]} treeData - Tree data\n * @param {!function} getNodeKey - Function to get the key from the nodeData and tree index\n * @param {function} callback - Function to call on each node\n * @param {boolean=} ignoreCollapsed - Ignore children of nodes without `expanded` set to `true`\n *\n * @return {Object[]} changedTreeData - The changed tree data\n */\nexport function map({\n  treeData,\n  getNodeKey,\n  callback,\n  ignoreCollapsed = true,\n}) {\n  if (!treeData || treeData.length < 1) {\n    return [];\n  }\n\n  return mapDescendants({\n    callback,\n    getNodeKey,\n    ignoreCollapsed,\n    isPseudoRoot: true,\n    node: { children: treeData },\n    currentIndex: -1,\n    path: [],\n    lowerSiblingCounts: [],\n  }).node.children;\n}\n\n/**\n * Expand or close every node in the tree\n *\n * @param {!Object[]} treeData - Tree data\n * @param {?boolean} expanded - Whether the node is expanded or not\n *\n * @return {Object[]} changedTreeData - The changed tree data\n */\nexport function toggleExpandedForAll({ treeData, expanded = true }) {\n  return map({\n    treeData,\n    callback: ({ node }) => ({ ...node, expanded }),\n    getNodeKey: ({ treeIndex }) => treeIndex,\n    ignoreCollapsed: false,\n  });\n}\n\n/**\n * Replaces node at path with object, or callback-defined object\n *\n * @param {!Object[]} treeData\n * @param {number[]|string[]} path - Array of keys leading up to node to be changed\n * @param {function|any} newNode - Node to replace the node at the path with, or a function producing the new node\n * @param {!function} getNodeKey - Function to get the key from the nodeData and tree index\n * @param {boolean=} ignoreCollapsed - Ignore children of nodes without `expanded` set to `true`\n *\n * @return {Object[]} changedTreeData - The changed tree data\n */\nexport function changeNodeAtPath({\n  treeData,\n  path,\n  newNode,\n  getNodeKey,\n  ignoreCollapsed = true,\n}) {\n  const RESULT_MISS = 'RESULT_MISS';\n  const traverse = ({\n    isPseudoRoot = false,\n    node,\n    currentTreeIndex,\n    pathIndex,\n  }) => {\n    if (\n      !isPseudoRoot &&\n      getNodeKey({ node, treeIndex: currentTreeIndex }) !== path[pathIndex]\n    ) {\n      return RESULT_MISS;\n    }\n\n    if (pathIndex >= path.length - 1) {\n      // If this is the final location in the path, return its changed form\n      return typeof newNode === 'function'\n        ? newNode({ node, treeIndex: currentTreeIndex })\n        : newNode;\n    } else if (!node.children) {\n      // If this node is part of the path, but has no children, return the unchanged node\n      throw new Error('Path referenced children of node with no children.');\n    }\n\n    let nextTreeIndex = currentTreeIndex + 1;\n    for (let i = 0; i < node.children.length; i += 1) {\n      const result = traverse({\n        node: node.children[i],\n        currentTreeIndex: nextTreeIndex,\n        pathIndex: pathIndex + 1,\n      });\n\n      // If the result went down the correct path\n      if (result !== RESULT_MISS) {\n        if (result) {\n          // If the result was truthy (in this case, an object),\n          //  pass it to the next level of recursion up\n          return {\n            ...node,\n            children: [\n              ...node.children.slice(0, i),\n              result,\n              ...node.children.slice(i + 1),\n            ],\n          };\n        }\n        // If the result was falsy (returned from the newNode function), then\n        //  delete the node from the array.\n        return {\n          ...node,\n          children: [\n            ...node.children.slice(0, i),\n            ...node.children.slice(i + 1),\n          ],\n        };\n      }\n\n      nextTreeIndex +=\n        1 + getDescendantCount({ node: node.children[i], ignoreCollapsed });\n    }\n\n    return RESULT_MISS;\n  };\n\n  // Use a pseudo-root node in the beginning traversal\n  const result = traverse({\n    node: { children: treeData },\n    currentTreeIndex: -1,\n    pathIndex: -1,\n    isPseudoRoot: true,\n  });\n\n  if (result === RESULT_MISS) {\n    throw new Error('No node found at the given path.');\n  }\n\n  return result.children;\n}\n\n/**\n * Removes the node at the specified path and returns the resulting treeData.\n *\n * @param {!Object[]} treeData\n * @param {number[]|string[]} path - Array of keys leading up to node to be deleted\n * @param {!function} getNodeKey - Function to get the key from the nodeData and tree index\n * @param {boolean=} ignoreCollapsed - Ignore children of nodes without `expanded` set to `true`\n *\n * @return {Object[]} changedTreeData - The tree data with the node removed\n */\nexport function removeNodeAtPath({\n  treeData,\n  path,\n  getNodeKey,\n  ignoreCollapsed = true,\n}) {\n  return changeNodeAtPath({\n    treeData,\n    path,\n    getNodeKey,\n    ignoreCollapsed,\n    newNode: null, // Delete the node\n  });\n}\n\n/**\n * Removes the node at the specified path and returns the resulting treeData.\n *\n * @param {!Object[]} treeData\n * @param {number[]|string[]} path - Array of keys leading up to node to be deleted\n * @param {!function} getNodeKey - Function to get the key from the nodeData and tree index\n * @param {boolean=} ignoreCollapsed - Ignore children of nodes without `expanded` set to `true`\n *\n * @return {Object} result\n * @return {Object[]} result.treeData - The tree data with the node removed\n * @return {Object} result.node - The node that was removed\n * @return {number} result.treeIndex - The previous treeIndex of the removed node\n */\nexport function removeNode({\n  treeData,\n  path,\n  getNodeKey,\n  ignoreCollapsed = true,\n}) {\n  let removedNode = null;\n  let removedTreeIndex = null;\n  const nextTreeData = changeNodeAtPath({\n    treeData,\n    path,\n    getNodeKey,\n    ignoreCollapsed,\n    newNode: ({ node, treeIndex }) => {\n      // Store the target node and delete it from the tree\n      removedNode = node;\n      removedTreeIndex = treeIndex;\n\n      return null;\n    },\n  });\n\n  return {\n    treeData: nextTreeData,\n    node: removedNode,\n    treeIndex: removedTreeIndex,\n  };\n}\n\n/**\n * Gets the node at the specified path\n *\n * @param {!Object[]} treeData\n * @param {number[]|string[]} path - Array of keys leading up to node to be deleted\n * @param {!function} getNodeKey - Function to get the key from the nodeData and tree index\n * @param {boolean=} ignoreCollapsed - Ignore children of nodes without `expanded` set to `true`\n *\n * @return {Object|null} nodeInfo - The node info at the given path, or null if not found\n */\nexport function getNodeAtPath({\n  treeData,\n  path,\n  getNodeKey,\n  ignoreCollapsed = true,\n}) {\n  let foundNodeInfo = null;\n\n  try {\n    changeNodeAtPath({\n      treeData,\n      path,\n      getNodeKey,\n      ignoreCollapsed,\n      newNode: ({ node, treeIndex }) => {\n        foundNodeInfo = { node, treeIndex };\n        return node;\n      },\n    });\n  } catch (err) {\n    // Ignore the error -- the null return will be explanation enough\n  }\n\n  return foundNodeInfo;\n}\n\n/**\n * Adds the node to the specified parent and returns the resulting treeData.\n *\n * @param {!Object[]} treeData\n * @param {!Object} newNode - The node to insert\n * @param {number|string} parentKey - The key of the to-be parentNode of the node\n * @param {!function} getNodeKey - Function to get the key from the nodeData and tree index\n * @param {boolean=} ignoreCollapsed - Ignore children of nodes without `expanded` set to `true`\n * @param {boolean=} expandParent - If true, expands the parentNode specified by parentPath\n *\n * @return {Object} result\n * @return {Object[]} result.treeData - The updated tree data\n * @return {number} result.treeIndex - The tree index at which the node was inserted\n */\nexport function addNodeUnderParent({\n  treeData,\n  newNode,\n  parentKey = null,\n  getNodeKey,\n  ignoreCollapsed = true,\n  expandParent = false,\n}) {\n  if (parentKey === null) {\n    return {\n      treeData: [...(treeData || []), newNode],\n      treeIndex: (treeData || []).length,\n    };\n  }\n\n  let insertedTreeIndex = null;\n  let hasBeenAdded = false;\n  const changedTreeData = map({\n    treeData,\n    getNodeKey,\n    ignoreCollapsed,\n    callback: ({ node, treeIndex, path }) => {\n      const key = path ? path[path.length - 1] : null;\n      // Return nodes that are not the parent as-is\n      if (hasBeenAdded || key !== parentKey) {\n        return node;\n      }\n      hasBeenAdded = true;\n\n      const parentNode = {\n        ...node,\n      };\n\n      if (expandParent) {\n        parentNode.expanded = true;\n      }\n\n      // If no children exist yet, just add the single newNode\n      if (!parentNode.children) {\n        insertedTreeIndex = treeIndex + 1;\n        return {\n          ...parentNode,\n          children: [newNode],\n        };\n      }\n\n      if (typeof parentNode.children === 'function') {\n        throw new Error('Cannot add to children defined by a function');\n      }\n\n      let nextTreeIndex = treeIndex + 1;\n      for (let i = 0; i < parentNode.children.length; i += 1) {\n        nextTreeIndex +=\n          1 +\n          getDescendantCount({ node: parentNode.children[i], ignoreCollapsed });\n      }\n\n      insertedTreeIndex = nextTreeIndex;\n\n      return {\n        ...parentNode,\n        children: [...parentNode.children, newNode],\n      };\n    },\n  });\n\n  if (!hasBeenAdded) {\n    throw new Error('No node found with the given key.');\n  }\n\n  return {\n    treeData: changedTreeData,\n    treeIndex: insertedTreeIndex,\n  };\n}\n\nfunction addNodeAtDepthAndIndex({\n  targetDepth,\n  minimumTreeIndex,\n  newNode,\n  ignoreCollapsed,\n  expandParent,\n  isPseudoRoot = false,\n  isLastChild,\n  node,\n  currentIndex,\n  currentDepth,\n  getNodeKey,\n  path = [],\n}) {\n  const selfPath = n =>\n    isPseudoRoot\n      ? []\n      : [...path, getNodeKey({ node: n, treeIndex: currentIndex })];\n\n  // If the current position is the only possible place to add, add it\n  if (\n    currentIndex >= minimumTreeIndex - 1 ||\n    (isLastChild && !(node.children && node.children.length))\n  ) {\n    if (typeof node.children === 'function') {\n      throw new Error('Cannot add to children defined by a function');\n    } else {\n      const extraNodeProps = expandParent ? { expanded: true } : {};\n      const nextNode = {\n        ...node,\n\n        ...extraNodeProps,\n        children: node.children ? [newNode, ...node.children] : [newNode],\n      };\n\n      return {\n        node: nextNode,\n        nextIndex: currentIndex + 2,\n        insertedTreeIndex: currentIndex + 1,\n        parentPath: selfPath(nextNode),\n        parentNode: isPseudoRoot ? null : nextNode,\n      };\n    }\n  }\n\n  // If this is the target depth for the insertion,\n  // i.e., where the newNode can be added to the current node's children\n  if (currentDepth >= targetDepth - 1) {\n    // Skip over nodes with no children or hidden children\n    if (\n      !node.children ||\n      typeof node.children === 'function' ||\n      (node.expanded !== true && ignoreCollapsed && !isPseudoRoot)\n    ) {\n      return { node, nextIndex: currentIndex + 1 };\n    }\n\n    // Scan over the children to see if there's a place among them that fulfills\n    // the minimumTreeIndex requirement\n    let childIndex = currentIndex + 1;\n    let insertedTreeIndex = null;\n    let insertIndex = null;\n    for (let i = 0; i < node.children.length; i += 1) {\n      // If a valid location is found, mark it as the insertion location and\n      // break out of the loop\n      if (childIndex >= minimumTreeIndex) {\n        insertedTreeIndex = childIndex;\n        insertIndex = i;\n        break;\n      }\n\n      // Increment the index by the child itself plus the number of descendants it has\n      childIndex +=\n        1 + getDescendantCount({ node: node.children[i], ignoreCollapsed });\n    }\n\n    // If no valid indices to add the node were found\n    if (insertIndex === null) {\n      // If the last position in this node's children is less than the minimum index\n      // and there are more children on the level of this node, return without insertion\n      if (childIndex < minimumTreeIndex && !isLastChild) {\n        return { node, nextIndex: childIndex };\n      }\n\n      // Use the last position in the children array to insert the newNode\n      insertedTreeIndex = childIndex;\n      insertIndex = node.children.length;\n    }\n\n    // Insert the newNode at the insertIndex\n    const nextNode = {\n      ...node,\n      children: [\n        ...node.children.slice(0, insertIndex),\n        newNode,\n        ...node.children.slice(insertIndex),\n      ],\n    };\n\n    // Return node with successful insert result\n    return {\n      node: nextNode,\n      nextIndex: childIndex,\n      insertedTreeIndex,\n      parentPath: selfPath(nextNode),\n      parentNode: isPseudoRoot ? null : nextNode,\n    };\n  }\n\n  // Skip over nodes with no children or hidden children\n  if (\n    !node.children ||\n    typeof node.children === 'function' ||\n    (node.expanded !== true && ignoreCollapsed && !isPseudoRoot)\n  ) {\n    return { node, nextIndex: currentIndex + 1 };\n  }\n\n  // Get all descendants\n  let insertedTreeIndex = null;\n  let pathFragment = null;\n  let parentNode = null;\n  let childIndex = currentIndex + 1;\n  let newChildren = node.children;\n  if (typeof newChildren !== 'function') {\n    newChildren = newChildren.map((child, i) => {\n      if (insertedTreeIndex !== null) {\n        return child;\n      }\n\n      const mapResult = addNodeAtDepthAndIndex({\n        targetDepth,\n        minimumTreeIndex,\n        newNode,\n        ignoreCollapsed,\n        expandParent,\n        isLastChild: isLastChild && i === newChildren.length - 1,\n        node: child,\n        currentIndex: childIndex,\n        currentDepth: currentDepth + 1,\n        getNodeKey,\n        path: [], // Cannot determine the parent path until the children have been processed\n      });\n\n      if ('insertedTreeIndex' in mapResult) {\n        ({\n          insertedTreeIndex,\n          parentNode,\n          parentPath: pathFragment,\n        } = mapResult);\n      }\n\n      childIndex = mapResult.nextIndex;\n\n      return mapResult.node;\n    });\n  }\n\n  const nextNode = { ...node, children: newChildren };\n  const result = {\n    node: nextNode,\n    nextIndex: childIndex,\n  };\n\n  if (insertedTreeIndex !== null) {\n    result.insertedTreeIndex = insertedTreeIndex;\n    result.parentPath = [...selfPath(nextNode), ...pathFragment];\n    result.parentNode = parentNode;\n  }\n\n  return result;\n}\n\n/**\n * Insert a node into the tree at the given depth, after the minimum index\n *\n * @param {!Object[]} treeData - Tree data\n * @param {!number} depth - The depth to insert the node at (the first level of the array being depth 0)\n * @param {!number} minimumTreeIndex - The lowest possible treeIndex to insert the node at\n * @param {!Object} newNode - The node to insert into the tree\n * @param {boolean=} ignoreCollapsed - Ignore children of nodes without `expanded` set to `true`\n * @param {boolean=} expandParent - If true, expands the parent of the inserted node\n * @param {!function} getNodeKey - Function to get the key from the nodeData and tree index\n *\n * @return {Object} result\n * @return {Object[]} result.treeData - The tree data with the node added\n * @return {number} result.treeIndex - The tree index at which the node was inserted\n * @return {number[]|string[]} result.path - Array of keys leading to the node location after insertion\n * @return {Object} result.parentNode - The parent node of the inserted node\n */\nexport function insertNode({\n  treeData,\n  depth: targetDepth,\n  minimumTreeIndex,\n  newNode,\n  getNodeKey = () => {},\n  ignoreCollapsed = true,\n  expandParent = false,\n}) {\n  if (!treeData && targetDepth === 0) {\n    return {\n      treeData: [newNode],\n      treeIndex: 0,\n      path: [getNodeKey({ node: newNode, treeIndex: 0 })],\n      parentNode: null,\n    };\n  }\n\n  const insertResult = addNodeAtDepthAndIndex({\n    targetDepth,\n    minimumTreeIndex,\n    newNode,\n    ignoreCollapsed,\n    expandParent,\n    getNodeKey,\n    isPseudoRoot: true,\n    isLastChild: true,\n    node: { children: treeData },\n    currentIndex: -1,\n    currentDepth: -1,\n  });\n\n  if (!('insertedTreeIndex' in insertResult)) {\n    throw new Error('No suitable position found to insert.');\n  }\n\n  const treeIndex = insertResult.insertedTreeIndex;\n  return {\n    treeData: insertResult.node.children,\n    treeIndex,\n    path: [\n      ...insertResult.parentPath,\n      getNodeKey({ node: newNode, treeIndex }),\n    ],\n    parentNode: insertResult.parentNode,\n  };\n}\n\n/**\n * Get tree data flattened.\n *\n * @param {!Object[]} treeData - Tree data\n * @param {!function} getNodeKey - Function to get the key from the nodeData and tree index\n * @param {boolean=} ignoreCollapsed - Ignore children of nodes without `expanded` set to `true`\n *\n * @return {{\n *      node: Object,\n *      path: []string|[]number,\n *      lowerSiblingCounts: []number\n *  }}[] nodes - The node array\n */\nexport function getFlatDataFromTree({\n  treeData,\n  getNodeKey,\n  ignoreCollapsed = true,\n}) {\n  if (!treeData || treeData.length < 1) {\n    return [];\n  }\n\n  const flattened = [];\n  walk({\n    treeData,\n    getNodeKey,\n    ignoreCollapsed,\n    callback: nodeInfo => {\n      flattened.push(nodeInfo);\n    },\n  });\n\n  return flattened;\n}\n\n/**\n * Generate a tree structure from flat data.\n *\n * @param {!Object[]} flatData\n * @param {!function=} getKey - Function to get the key from the nodeData\n * @param {!function=} getParentKey - Function to get the parent key from the nodeData\n * @param {string|number=} rootKey - The value returned by `getParentKey` that corresponds to the root node.\n *                                  For example, if your nodes have id 1-99, you might use rootKey = 0\n *\n * @return {Object[]} treeData - The flat data represented as a tree\n */\nexport function getTreeFromFlatData({\n  flatData,\n  getKey = node => node.id,\n  getParentKey = node => node.parentId,\n  rootKey = '0',\n}) {\n  if (!flatData) {\n    return [];\n  }\n\n  const childrenToParents = {};\n  flatData.forEach(child => {\n    const parentKey = getParentKey(child);\n\n    if (parentKey in childrenToParents) {\n      childrenToParents[parentKey].push(child);\n    } else {\n      childrenToParents[parentKey] = [child];\n    }\n  });\n\n  if (!(rootKey in childrenToParents)) {\n    return [];\n  }\n\n  const trav = parent => {\n    const parentKey = getKey(parent);\n    if (parentKey in childrenToParents) {\n      return {\n        ...parent,\n        children: childrenToParents[parentKey].map(child => trav(child)),\n      };\n    }\n\n    return { ...parent };\n  };\n\n  return childrenToParents[rootKey].map(child => trav(child));\n}\n\n/**\n * Check if a node is a descendant of another node.\n *\n * @param {!Object} older - Potential ancestor of younger node\n * @param {!Object} younger - Potential descendant of older node\n *\n * @return {boolean}\n */\nexport function isDescendant(older, younger) {\n  return (\n    !!older.children &&\n    typeof older.children !== 'function' &&\n    older.children.some(\n      child => child === younger || isDescendant(child, younger)\n    )\n  );\n}\n\n/**\n * Get the maximum depth of the children (the depth of the root node is 0).\n *\n * @param {!Object} node - Node in the tree\n * @param {?number} depth - The current depth\n *\n * @return {number} maxDepth - The deepest depth in the tree\n */\nexport function getDepth(node, depth = 0) {\n  if (!node.children) {\n    return depth;\n  }\n\n  if (typeof node.children === 'function') {\n    return depth + 1;\n  }\n\n  return node.children.reduce(\n    (deepest, child) => Math.max(deepest, getDepth(child, depth + 1)),\n    depth\n  );\n}\n\n/**\n * Find nodes matching a search query in the tree,\n *\n * @param {!function} getNodeKey - Function to get the key from the nodeData and tree index\n * @param {!Object[]} treeData - Tree data\n * @param {?string|number} searchQuery - Function returning a boolean to indicate whether the node is a match or not\n * @param {!function} searchMethod - Function returning a boolean to indicate whether the node is a match or not\n * @param {?number} searchFocusOffset - The offset of the match to focus on\n *                                      (e.g., 0 focuses on the first match, 1 on the second)\n * @param {boolean=} expandAllMatchPaths - If true, expands the paths to any matched node\n * @param {boolean=} expandFocusMatchPaths - If true, expands the path to the focused node\n *\n * @return {Object[]} matches - An array of objects containing the matching `node`s, their `path`s and `treeIndex`s\n * @return {Object[]} treeData - The original tree data with all relevant nodes expanded.\n *                               If expandAllMatchPaths and expandFocusMatchPaths are both false,\n *                               it will be the same as the original tree data.\n */\nexport function find({\n  getNodeKey,\n  treeData,\n  searchQuery,\n  searchMethod,\n  searchFocusOffset,\n  expandAllMatchPaths = false,\n  expandFocusMatchPaths = true,\n}) {\n  let matchCount = 0;\n  const trav = ({ isPseudoRoot = false, node, currentIndex, path = [] }) => {\n    let matches = [];\n    let isSelfMatch = false;\n    let hasFocusMatch = false;\n    // The pseudo-root is not considered in the path\n    const selfPath = isPseudoRoot\n      ? []\n      : [...path, getNodeKey({ node, treeIndex: currentIndex })];\n    const extraInfo = isPseudoRoot\n      ? null\n      : {\n          path: selfPath,\n          treeIndex: currentIndex,\n        };\n\n    // Nodes with with children that aren't lazy\n    const hasChildren =\n      node.children &&\n      typeof node.children !== 'function' &&\n      node.children.length > 0;\n\n    // Examine the current node to see if it is a match\n    if (!isPseudoRoot && searchMethod({ ...extraInfo, node, searchQuery })) {\n      if (matchCount === searchFocusOffset) {\n        hasFocusMatch = true;\n      }\n\n      // Keep track of the number of matching nodes, so we know when the searchFocusOffset\n      //  is reached\n      matchCount += 1;\n\n      // We cannot add this node to the matches right away, as it may be changed\n      //  during the search of the descendants. The entire node is used in\n      //  comparisons between nodes inside the `matches` and `treeData` results\n      //  of this method (`find`)\n      isSelfMatch = true;\n    }\n\n    let childIndex = currentIndex;\n    const newNode = { ...node };\n    if (hasChildren) {\n      // Get all descendants\n      newNode.children = newNode.children.map(child => {\n        const mapResult = trav({\n          node: child,\n          currentIndex: childIndex + 1,\n          path: selfPath,\n        });\n\n        // Ignore hidden nodes by only advancing the index counter to the returned treeIndex\n        // if the child is expanded.\n        //\n        // The child could have been expanded from the start,\n        // or expanded due to a matching node being found in its descendants\n        if (mapResult.node.expanded) {\n          childIndex = mapResult.treeIndex;\n        } else {\n          childIndex += 1;\n        }\n\n        if (mapResult.matches.length > 0 || mapResult.hasFocusMatch) {\n          matches = [...matches, ...mapResult.matches];\n          if (mapResult.hasFocusMatch) {\n            hasFocusMatch = true;\n          }\n\n          // Expand the current node if it has descendants matching the search\n          // and the settings are set to do so.\n          if (\n            (expandAllMatchPaths && mapResult.matches.length > 0) ||\n            ((expandAllMatchPaths || expandFocusMatchPaths) &&\n              mapResult.hasFocusMatch)\n          ) {\n            newNode.expanded = true;\n          }\n        }\n\n        return mapResult.node;\n      });\n    }\n\n    // Cannot assign a treeIndex to hidden nodes\n    if (!isPseudoRoot && !newNode.expanded) {\n      matches = matches.map(match => ({\n        ...match,\n        treeIndex: null,\n      }));\n    }\n\n    // Add this node to the matches if it fits the search criteria.\n    // This is performed at the last minute so newNode can be sent in its final form.\n    if (isSelfMatch) {\n      matches = [{ ...extraInfo, node: newNode }, ...matches];\n    }\n\n    return {\n      node: matches.length > 0 ? newNode : node,\n      matches,\n      hasFocusMatch,\n      treeIndex: childIndex,\n    };\n  };\n\n  const result = trav({\n    node: { children: treeData },\n    isPseudoRoot: true,\n    currentIndex: -1,\n  });\n\n  return {\n    matches: result.matches,\n    treeData: result.node.children,\n  };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/utils/tree-data-utils.js","module.exports = require(\"react\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"react\"\n// module id = 1\n// module chunks = 0","module.exports = require(\"prop-types\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"prop-types\"\n// module id = 2\n// module chunks = 0","// very simple className utility for creating a classname string...\n// Falsy arguments are ignored:\n//\n// const active = true\n// const className = classnames(\n//    \"class1\",\n//    !active && \"class2\",\n//    active && \"class3\"\n// ); // returns -> class1 class3\";\n//\nexport default function classnames(...classes) {\n  // Use Boolean constructor as a filter callback\n  // Allows for loose type truthy/falsey checks\n  // Boolean(\"\") === false;\n  // Boolean(false) === false;\n  // Boolean(undefined) === false;\n  // Boolean(null) === false;\n  // Boolean(0) === false;\n  // Boolean(\"classname\") === true;\n  return classes.filter(Boolean).join(' ');\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/utils/classnames.js","export function defaultGetNodeKey({ treeIndex }) {\n  return treeIndex;\n}\n\n// Cheap hack to get the text of a react object\nfunction getReactElementText(parent) {\n  if (typeof parent === 'string') {\n    return parent;\n  }\n\n  if (\n    typeof parent !== 'object' ||\n    !parent.props ||\n    !parent.props.children ||\n    (typeof parent.props.children !== 'string' &&\n      typeof parent.props.children !== 'object')\n  ) {\n    return '';\n  }\n\n  if (typeof parent.props.children === 'string') {\n    return parent.props.children;\n  }\n\n  return parent.props.children\n    .map(child => getReactElementText(child))\n    .join('');\n}\n\n// Search for a query string inside a node property\nfunction stringSearch(key, searchQuery, node, path, treeIndex) {\n  if (typeof node[key] === 'function') {\n    // Search within text after calling its function to generate the text\n    return (\n      String(node[key]({ node, path, treeIndex })).indexOf(searchQuery) > -1\n    );\n  } else if (typeof node[key] === 'object') {\n    // Search within text inside react elements\n    return getReactElementText(node[key]).indexOf(searchQuery) > -1;\n  }\n\n  // Search within string\n  return node[key] && String(node[key]).indexOf(searchQuery) > -1;\n}\n\nexport function defaultSearchMethod({ node, path, treeIndex, searchQuery }) {\n  return (\n    stringSearch('title', searchQuery, node, path, treeIndex) ||\n    stringSearch('subtitle', searchQuery, node, path, treeIndex)\n  );\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/utils/default-handlers.js","import {\n  insertNode,\n  getDescendantCount,\n  getFlatDataFromTree,\n} from './tree-data-utils';\n\nconst memoize = f => {\n  let savedArgsArray = [];\n  let savedKeysArray = [];\n  let savedResult = null;\n\n  return args => {\n    const keysArray = Object.keys(args).sort();\n    const argsArray = keysArray.map(key => args[key]);\n\n    // If the arguments for the last insert operation are different than this time,\n    // recalculate the result\n    if (\n      argsArray.length !== savedArgsArray.length ||\n      argsArray.some((arg, index) => arg !== savedArgsArray[index]) ||\n      keysArray.some((key, index) => key !== savedKeysArray[index])\n    ) {\n      savedArgsArray = argsArray;\n      savedKeysArray = keysArray;\n      savedResult = f(args);\n    }\n\n    return savedResult;\n  };\n};\n\nexport const memoizedInsertNode = memoize(insertNode);\nexport const memoizedGetFlatDataFromTree = memoize(getFlatDataFromTree);\nexport const memoizedGetDescendantCount = memoize(getDescendantCount);\n\n\n\n// WEBPACK FOOTER //\n// ./src/utils/memoized-tree-data-utils.js","import SortableTree, {\n  SortableTreeWithoutDndContext,\n} from './react-sortable-tree';\n\nexport * from './utils/default-handlers';\nexport * from './utils/tree-data-utils';\nexport default SortableTree;\n\n// Export the tree component without the react-dnd DragDropContext,\n// for when component is used with other components using react-dnd.\n// see: https://github.com/gaearon/react-dnd/issues/186\nexport { SortableTreeWithoutDndContext };\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { AutoSizer, List } from 'react-virtualized';\nimport isEqual from 'lodash.isequal';\nimport withScrolling, {\n  createVerticalStrength,\n  createHorizontalStrength,\n} from 'react-dnd-scrollzone';\nimport 'react-virtualized/styles.css';\nimport TreeNode from './tree-node';\nimport NodeRendererDefault from './node-renderer-default';\nimport TreePlaceholder from './tree-placeholder';\nimport PlaceholderRendererDefault from './placeholder-renderer-default';\nimport {\n  walk,\n  changeNodeAtPath,\n  removeNode,\n  insertNode,\n  find,\n  toggleExpandedForAll,\n} from './utils/tree-data-utils';\nimport {\n  memoizedInsertNode,\n  memoizedGetFlatDataFromTree,\n  memoizedGetDescendantCount,\n} from './utils/memoized-tree-data-utils';\nimport { slideRows } from './utils/generic-utils';\nimport {\n  defaultGetNodeKey,\n  defaultSearchMethod,\n} from './utils/default-handlers';\nimport DndManager from './utils/dnd-manager';\nimport classnames from './utils/classnames';\nimport './react-sortable-tree.css';\n\nlet treeIdCounter = 1;\n\nconst mergeTheme = props => {\n  const merged = {\n    ...props,\n    style: { ...props.theme.style, ...props.style },\n    innerStyle: { ...props.theme.innerStyle, ...props.innerStyle },\n    reactVirtualizedListProps: {\n      ...props.theme.reactVirtualizedListProps,\n      ...props.reactVirtualizedListProps,\n    },\n  };\n\n  const overridableDefaults = {\n    nodeContentRenderer: NodeRendererDefault,\n    placeholderRenderer: PlaceholderRendererDefault,\n    rowHeight: 62,\n    scaffoldBlockPxWidth: 44,\n    slideRegionSize: 100,\n    treeNodeRenderer: TreeNode,\n  };\n  Object.keys(overridableDefaults).forEach(propKey => {\n    // If prop has been specified, do not change it\n    // If prop is specified in theme, use the theme setting\n    // If all else fails, fall back to the default\n    if (props[propKey] === null) {\n      merged[propKey] =\n        typeof props.theme[propKey] !== 'undefined'\n          ? props.theme[propKey]\n          : overridableDefaults[propKey];\n    }\n  });\n\n  return merged;\n};\n\nclass ReactSortableTree extends Component {\n  constructor(props) {\n    super(props);\n\n    const {\n      dndType,\n      nodeContentRenderer,\n      treeNodeRenderer,\n      isVirtualized,\n      slideRegionSize,\n    } = mergeTheme(props);\n\n    this.dndManager = new DndManager(this);\n\n    // Wrapping classes for use with react-dnd\n    this.treeId = `rst__${treeIdCounter}`;\n    treeIdCounter += 1;\n    this.dndType = dndType || this.treeId;\n    this.nodeContentRenderer = this.dndManager.wrapSource(nodeContentRenderer);\n    this.treePlaceholderRenderer = this.dndManager.wrapPlaceholder(\n      TreePlaceholder\n    );\n    this.treeNodeRenderer = this.dndManager.wrapTarget(treeNodeRenderer);\n\n    // Prepare scroll-on-drag options for this list\n    if (isVirtualized) {\n      this.scrollZoneVirtualList = withScrolling(List);\n      this.vStrength = createVerticalStrength(slideRegionSize);\n      this.hStrength = createHorizontalStrength(slideRegionSize);\n    }\n\n    this.state = {\n      draggingTreeData: null,\n      draggedNode: null,\n      draggedMinimumTreeIndex: null,\n      draggedDepth: null,\n      searchMatches: [],\n      searchFocusTreeIndex: null,\n      dragging: false,\n    };\n\n    this.toggleChildrenVisibility = this.toggleChildrenVisibility.bind(this);\n    this.moveNode = this.moveNode.bind(this);\n    this.startDrag = this.startDrag.bind(this);\n    this.dragHover = this.dragHover.bind(this);\n    this.endDrag = this.endDrag.bind(this);\n    this.drop = this.drop.bind(this);\n    this.handleDndMonitorChange = this.handleDndMonitorChange.bind(this);\n  }\n\n  componentDidMount() {\n    this.loadLazyChildren();\n    this.search(this.props);\n\n    // Hook into react-dnd state changes to detect when the drag ends\n    // TODO: This is very brittle, so it needs to be replaced if react-dnd\n    // offers a more official way to detect when a drag ends\n    this.clearMonitorSubscription = this.context.dragDropManager\n      .getMonitor()\n      .subscribeToStateChange(this.handleDndMonitorChange);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (this.props.treeData !== nextProps.treeData) {\n      // Ignore updates caused by search, in order to avoid infinite looping\n      if (this.ignoreOneTreeUpdate) {\n        this.ignoreOneTreeUpdate = false;\n      } else {\n        // Reset the focused index if the tree has changed\n        this.setState({ searchFocusTreeIndex: null });\n\n        // Load any children defined by a function\n        this.loadLazyChildren(nextProps);\n\n        this.search(nextProps, false, false);\n      }\n\n      // Reset the drag state\n      this.setState({\n        draggingTreeData: null,\n        draggedNode: null,\n        draggedMinimumTreeIndex: null,\n        draggedDepth: null,\n        dragging: false,\n      });\n    } else if (!isEqual(this.props.searchQuery, nextProps.searchQuery)) {\n      this.search(nextProps);\n    } else if (this.props.searchFocusOffset !== nextProps.searchFocusOffset) {\n      this.search(nextProps, true, true, true);\n    }\n  }\n\n  // listen to dragging\n  componentDidUpdate(prevProps, prevState) {\n    // if it is not the same then call the onDragStateChanged\n    if (this.state.dragging !== prevState.dragging) {\n      if (this.props.onDragStateChanged) {\n        this.props.onDragStateChanged({\n          isDragging: this.state.dragging,\n          draggedNode: this.state.draggedNode,\n        });\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    this.clearMonitorSubscription();\n  }\n\n  getRows(treeData) {\n    return memoizedGetFlatDataFromTree({\n      ignoreCollapsed: true,\n      getNodeKey: this.props.getNodeKey,\n      treeData,\n    });\n  }\n\n  handleDndMonitorChange() {\n    const monitor = this.context.dragDropManager.getMonitor();\n    // If the drag ends and the tree is still in a mid-drag state,\n    // it means that the drag was canceled or the dragSource dropped\n    // elsewhere, and we should reset the state of this tree\n    if (!monitor.isDragging() && this.state.draggingTreeData) {\n      this.endDrag();\n    }\n  }\n\n  toggleChildrenVisibility({ node: targetNode, path }) {\n    const treeData = changeNodeAtPath({\n      treeData: this.props.treeData,\n      path,\n      newNode: ({ node }) => ({ ...node, expanded: !node.expanded }),\n      getNodeKey: this.props.getNodeKey,\n    });\n\n    this.props.onChange(treeData);\n\n    this.props.onVisibilityToggle({\n      treeData,\n      node: targetNode,\n      expanded: !targetNode.expanded,\n      path,\n    });\n  }\n\n  moveNode({\n    node,\n    path: prevPath,\n    treeIndex: prevTreeIndex,\n    depth,\n    minimumTreeIndex,\n  }) {\n    const {\n      treeData,\n      treeIndex,\n      path,\n      parentNode: nextParentNode,\n    } = insertNode({\n      treeData: this.state.draggingTreeData,\n      newNode: node,\n      depth,\n      minimumTreeIndex,\n      expandParent: true,\n      getNodeKey: this.props.getNodeKey,\n    });\n\n    this.props.onChange(treeData);\n\n    this.props.onMoveNode({\n      treeData,\n      node,\n      treeIndex,\n      path,\n      nextPath: path,\n      nextTreeIndex: treeIndex,\n      prevPath,\n      prevTreeIndex,\n      nextParentNode,\n    });\n  }\n\n  search(\n    props = this.props,\n    seekIndex = true,\n    expand = true,\n    singleSearch = false\n  ) {\n    const {\n      treeData,\n      onChange,\n      searchFinishCallback,\n      searchQuery,\n      searchMethod,\n      searchFocusOffset,\n      onlyExpandSearchedNodes,\n    } = props;\n\n    // Skip search if no conditions are specified\n    if (\n      (searchQuery === null ||\n        typeof searchQuery === 'undefined' ||\n        String(searchQuery) === '') &&\n      !searchMethod\n    ) {\n      this.setState({\n        searchMatches: [],\n      });\n\n      if (searchFinishCallback) {\n        searchFinishCallback([]);\n      }\n\n      return;\n    }\n\n    // if onlyExpandSearchedNodes collapse the tree and search\n    const { treeData: expandedTreeData, matches: searchMatches } = find({\n      getNodeKey: this.props.getNodeKey,\n      treeData: onlyExpandSearchedNodes\n        ? toggleExpandedForAll({ treeData, expanded: false })\n        : treeData,\n      searchQuery,\n      searchMethod: searchMethod || defaultSearchMethod,\n      searchFocusOffset,\n      expandAllMatchPaths: expand && !singleSearch,\n      expandFocusMatchPaths: !!expand,\n    });\n\n    // Update the tree with data leaving all paths leading to matching nodes open\n    if (expand) {\n      this.ignoreOneTreeUpdate = true; // Prevents infinite loop\n      onChange(expandedTreeData);\n    }\n\n    if (searchFinishCallback) {\n      searchFinishCallback(searchMatches);\n    }\n\n    let searchFocusTreeIndex = null;\n    if (\n      seekIndex &&\n      searchFocusOffset !== null &&\n      searchFocusOffset < searchMatches.length\n    ) {\n      searchFocusTreeIndex = searchMatches[searchFocusOffset].treeIndex;\n    }\n\n    this.setState({\n      searchMatches,\n      searchFocusTreeIndex,\n    });\n  }\n\n  startDrag({ path }) {\n    this.setState(() => {\n      const {\n        treeData: draggingTreeData,\n        node: draggedNode,\n        treeIndex: draggedMinimumTreeIndex,\n      } = removeNode({\n        treeData: this.props.treeData,\n        path,\n        getNodeKey: this.props.getNodeKey,\n      });\n\n      return {\n        draggingTreeData,\n        draggedNode,\n        draggedDepth: path.length - 1,\n        draggedMinimumTreeIndex,\n        dragging: true,\n      };\n    });\n  }\n\n  dragHover({\n    node: draggedNode,\n    depth: draggedDepth,\n    minimumTreeIndex: draggedMinimumTreeIndex,\n  }) {\n    // Ignore this hover if it is at the same position as the last hover\n    if (\n      this.state.draggedDepth === draggedDepth &&\n      this.state.draggedMinimumTreeIndex === draggedMinimumTreeIndex\n    ) {\n      return;\n    }\n\n    // Fall back to the tree data if something is being dragged in from\n    //  an external element\n    const draggingTreeData = this.state.draggingTreeData || this.props.treeData;\n\n    const addedResult = memoizedInsertNode({\n      treeData: draggingTreeData,\n      newNode: draggedNode,\n      depth: draggedDepth,\n      minimumTreeIndex: draggedMinimumTreeIndex,\n      expandParent: true,\n      getNodeKey: this.props.getNodeKey,\n    });\n\n    const rows = this.getRows(addedResult.treeData);\n    const expandedParentPath = rows[addedResult.treeIndex].path;\n\n    this.setState({\n      draggedNode,\n      draggedDepth,\n      draggedMinimumTreeIndex,\n      draggingTreeData: changeNodeAtPath({\n        treeData: draggingTreeData,\n        path: expandedParentPath.slice(0, -1),\n        newNode: ({ node }) => ({ ...node, expanded: true }),\n        getNodeKey: this.props.getNodeKey,\n      }),\n      // reset the scroll focus so it doesn't jump back\n      // to a search result while dragging\n      searchFocusTreeIndex: null,\n      dragging: true,\n    });\n  }\n\n  endDrag(dropResult) {\n    const resetTree = () =>\n      this.setState({\n        draggingTreeData: null,\n        draggedNode: null,\n        draggedMinimumTreeIndex: null,\n        draggedDepth: null,\n        dragging: false,\n      });\n\n    // Drop was cancelled\n    if (!dropResult) {\n      resetTree();\n    } else if (dropResult.treeId !== this.treeId) {\n      // The node was dropped in an external drop target or tree\n      const { node, path, treeIndex } = dropResult;\n      let shouldCopy = this.props.shouldCopyOnOutsideDrop;\n      if (typeof shouldCopy === 'function') {\n        shouldCopy = shouldCopy({\n          node,\n          prevTreeIndex: treeIndex,\n          prevPath: path,\n        });\n      }\n\n      let treeData = this.state.draggingTreeData || this.props.treeData;\n\n      // If copying is enabled, a drop outside leaves behind a copy in the\n      //  source tree\n      if (shouldCopy) {\n        treeData = changeNodeAtPath({\n          treeData: this.props.treeData, // use treeData unaltered by the drag operation\n          path,\n          newNode: ({ node: copyNode }) => ({ ...copyNode }), // create a shallow copy of the node\n          getNodeKey: this.props.getNodeKey,\n        });\n      }\n\n      this.props.onChange(treeData);\n\n      this.props.onMoveNode({\n        treeData,\n        node,\n        treeIndex: null,\n        path: null,\n        nextPath: null,\n        nextTreeIndex: null,\n        prevPath: path,\n        prevTreeIndex: treeIndex,\n      });\n    }\n  }\n\n  drop(dropResult) {\n    this.moveNode(dropResult);\n  }\n\n  // Load any children in the tree that are given by a function\n  loadLazyChildren(props = this.props) {\n    walk({\n      treeData: props.treeData,\n      getNodeKey: this.props.getNodeKey,\n      callback: ({ node, path, lowerSiblingCounts, treeIndex }) => {\n        // If the node has children defined by a function, and is either expanded\n        //  or set to load even before expansion, run the function.\n        if (\n          node.children &&\n          typeof node.children === 'function' &&\n          (node.expanded || props.loadCollapsedLazyChildren)\n        ) {\n          // Call the children fetching function\n          node.children({\n            node,\n            path,\n            lowerSiblingCounts,\n            treeIndex,\n\n            // Provide a helper to append the new data when it is received\n            done: childrenArray =>\n              this.props.onChange(\n                changeNodeAtPath({\n                  treeData: this.props.treeData,\n                  path,\n                  newNode: ({ node: oldNode }) =>\n                    // Only replace the old node if it's the one we set off to find children\n                    //  for in the first place\n                    oldNode === node\n                      ? {\n                          ...oldNode,\n                          children: childrenArray,\n                        }\n                      : oldNode,\n                  getNodeKey: this.props.getNodeKey,\n                })\n              ),\n          });\n        }\n      },\n    });\n  }\n\n  renderRow(\n    { node, parentNode, path, lowerSiblingCounts, treeIndex },\n    { listIndex, style, getPrevRow, matchKeys, swapFrom, swapDepth, swapLength, parentGrid }\n  ) {\n    const {\n      canDrag,\n      generateNodeProps,\n      scaffoldBlockPxWidth,\n      searchFocusOffset,\n    } = mergeTheme(this.props);\n    const TreeNodeRenderer = this.treeNodeRenderer;\n    const NodeContentRenderer = this.nodeContentRenderer;\n    const nodeKey = path[path.length - 1];\n    const isSearchMatch = nodeKey in matchKeys;\n    const isSearchFocus =\n      isSearchMatch && matchKeys[nodeKey] === searchFocusOffset;\n    const callbackParams = {\n      node,\n      parentNode,\n      path,\n      lowerSiblingCounts,\n      treeIndex,\n      isSearchMatch,\n      isSearchFocus,\n    };\n    const nodeProps = !generateNodeProps\n      ? {}\n      : generateNodeProps(callbackParams);\n    const rowCanDrag =\n      typeof canDrag !== 'function' ? canDrag : canDrag(callbackParams);\n\n    const sharedProps = {\n      treeIndex,\n      scaffoldBlockPxWidth,\n      node,\n      path,\n      treeId: this.treeId,\n    };\n\n    return (\n      <TreeNodeRenderer\n        style={style}\n        key={nodeKey}\n        listIndex={listIndex}\n        getPrevRow={getPrevRow}\n        lowerSiblingCounts={lowerSiblingCounts}\n        swapFrom={swapFrom}\n        swapLength={swapLength}\n        swapDepth={swapDepth}\n        parentGrid={parentGrid}\n        {...sharedProps}\n      >\n        <NodeContentRenderer\n          parentNode={parentNode}\n          isSearchMatch={isSearchMatch}\n          isSearchFocus={isSearchFocus}\n          canDrag={rowCanDrag}\n          toggleChildrenVisibility={this.toggleChildrenVisibility}\n          {...sharedProps}\n          {...nodeProps}\n        />\n      </TreeNodeRenderer>\n    );\n  }\n\n  render() {\n    const {\n      style,\n      className,\n      innerStyle,\n      rowHeight,\n      isVirtualized,\n      placeholderRenderer,\n      reactVirtualizedListProps,\n      getNodeKey,\n    } = mergeTheme(this.props);\n    const {\n      searchMatches,\n      searchFocusTreeIndex,\n      draggedNode,\n      draggedDepth,\n      draggedMinimumTreeIndex,\n    } = this.state;\n\n    const treeData = this.state.draggingTreeData || this.props.treeData;\n\n    let rows;\n    let swapFrom = null;\n    let swapLength = null;\n    if (draggedNode && draggedMinimumTreeIndex !== null) {\n      const addedResult = memoizedInsertNode({\n        treeData,\n        newNode: draggedNode,\n        depth: draggedDepth,\n        minimumTreeIndex: draggedMinimumTreeIndex,\n        expandParent: true,\n        getNodeKey,\n      });\n\n      const swapTo = draggedMinimumTreeIndex;\n      swapFrom = addedResult.treeIndex;\n      swapLength = 1 + memoizedGetDescendantCount({ node: draggedNode });\n      rows = slideRows(\n        this.getRows(addedResult.treeData),\n        swapFrom,\n        swapTo,\n        swapLength\n      );\n    } else {\n      rows = this.getRows(treeData);\n    }\n\n    // Get indices for rows that match the search conditions\n    const matchKeys = {};\n    searchMatches.forEach(({ path }, i) => {\n      matchKeys[path[path.length - 1]] = i;\n    });\n\n    // Seek to the focused search result if there is one specified\n    const scrollToInfo =\n      searchFocusTreeIndex !== null\n        ? { scrollToIndex: searchFocusTreeIndex }\n        : {};\n\n    let containerStyle = style;\n    let list;\n    if (rows.length < 1) {\n      const Placeholder = this.treePlaceholderRenderer;\n      const PlaceholderContent = placeholderRenderer;\n      list = (\n        <Placeholder treeId={this.treeId} drop={this.drop}>\n          <PlaceholderContent />\n        </Placeholder>\n      );\n    } else if (isVirtualized) {\n      containerStyle = { height: '100%', ...containerStyle };\n\n      const ScrollZoneVirtualList = this.scrollZoneVirtualList;\n      // Render list with react-virtualized\n      list = (\n        <AutoSizer>\n          {({ height, width }) => (\n            <ScrollZoneVirtualList\n              {...scrollToInfo}\n              verticalStrength={this.vStrength}\n              horizontalStrength={this.hStrength}\n              speed={30}\n              scrollToAlignment=\"start\"\n              className=\"rst__virtualScrollOverride\"\n              width={width}\n              onScroll={({ scrollTop }) => {\n                this.scrollTop = scrollTop;\n              }}\n              height={height}\n              style={innerStyle}\n              rowCount={rows.length}\n              estimatedRowSize={\n                typeof rowHeight !== 'function' ? rowHeight : undefined\n              }\n              rowHeight={\n                typeof rowHeight !== 'function'\n                  ? rowHeight\n                  : ({ index }) =>\n                      rowHeight({\n                        index,\n                        treeIndex: index,\n                        node: rows[index].node,\n                        path: rows[index].path,\n                      })\n              }\n              rowRenderer={({ index, style: rowStyle, parent }) =>\n                this.renderRow(rows[index], {\n                  parentGrid: parent,\n                  listIndex: index,\n                  style: rowStyle,\n                  getPrevRow: () => rows[index - 1] || null,\n                  matchKeys,\n                  swapFrom,\n                  swapDepth: draggedDepth,\n                  swapLength,\n                })\n              }\n              {...reactVirtualizedListProps}\n            />\n          )}\n        </AutoSizer>\n      );\n    } else {\n      // Render list without react-virtualized\n      list = rows.map((row, index) =>\n        this.renderRow(row, {\n          listIndex: index,\n          style: {\n            height:\n              typeof rowHeight !== 'function'\n                ? rowHeight\n                : rowHeight({\n                    index,\n                    treeIndex: index,\n                    node: row.node,\n                    path: row.path,\n                  }),\n          },\n          getPrevRow: () => rows[index - 1] || null,\n          matchKeys,\n          swapFrom,\n          swapDepth: draggedDepth,\n          swapLength,\n        })\n      );\n    }\n\n    return (\n      <div\n        className={classnames('rst__tree', className)}\n        style={containerStyle}\n      >\n        {list}\n      </div>\n    );\n  }\n}\n\nReactSortableTree.propTypes = {\n  // Tree data in the following format:\n  // [{title: 'main', subtitle: 'sub'}, { title: 'value2', expanded: true, children: [{ title: 'value3') }] }]\n  // `title` is the primary label for the node\n  // `subtitle` is a secondary label for the node\n  // `expanded` shows children of the node if true, or hides them if false. Defaults to false.\n  // `children` is an array of child nodes belonging to the node.\n  treeData: PropTypes.arrayOf(PropTypes.object).isRequired,\n\n  // Style applied to the container wrapping the tree (style defaults to {height: '100%'})\n  style: PropTypes.shape({}),\n\n  // Class name for the container wrapping the tree\n  className: PropTypes.string,\n\n  // Style applied to the inner, scrollable container (for padding, etc.)\n  innerStyle: PropTypes.shape({}),\n\n  // Used by react-virtualized\n  // Either a fixed row height (number) or a function that returns the\n  // height of a row given its index: `({ index: number }): number`\n  rowHeight: PropTypes.oneOfType([PropTypes.number, PropTypes.func]),\n\n  // Size in px of the region near the edges that initiates scrolling on dragover\n  slideRegionSize: PropTypes.number,\n\n  // Custom properties to hand to the react-virtualized list\n  // https://github.com/bvaughn/react-virtualized/blob/master/docs/List.md#prop-types\n  reactVirtualizedListProps: PropTypes.shape({}),\n\n  // The width of the blocks containing the lines representing the structure of the tree.\n  scaffoldBlockPxWidth: PropTypes.number,\n\n  // Maximum depth nodes can be inserted at. Defaults to infinite.\n  maxDepth: PropTypes.number,\n\n  // The method used to search nodes.\n  // Defaults to a function that uses the `searchQuery` string to search for nodes with\n  // matching `title` or `subtitle` values.\n  // NOTE: Changing `searchMethod` will not update the search, but changing the `searchQuery` will.\n  searchMethod: PropTypes.func,\n\n  // Used by the `searchMethod` to highlight and scroll to matched nodes.\n  // Should be a string for the default `searchMethod`, but can be anything when using a custom search.\n  searchQuery: PropTypes.any, // eslint-disable-line react/forbid-prop-types\n\n  // Outline the <`searchFocusOffset`>th node and scroll to it.\n  searchFocusOffset: PropTypes.number,\n\n  // Get the nodes that match the search criteria. Used for counting total matches, etc.\n  searchFinishCallback: PropTypes.func,\n\n  // Generate an object with additional props to be passed to the node renderer.\n  // Use this for adding buttons via the `buttons` key,\n  // or additional `style` / `className` settings.\n  generateNodeProps: PropTypes.func,\n\n  // Set to false to disable virtualization.\n  // NOTE: Auto-scrolling while dragging, and scrolling to the `searchFocusOffset` will be disabled.\n  isVirtualized: PropTypes.bool,\n\n  treeNodeRenderer: PropTypes.func,\n\n  // Override the default component for rendering nodes (but keep the scaffolding generator)\n  // This is an advanced option for complete customization of the appearance.\n  // It is best to copy the component in `node-renderer-default.js` to use as a base, and customize as needed.\n  nodeContentRenderer: PropTypes.func,\n\n  // Override the default component for rendering an empty tree\n  // This is an advanced option for complete customization of the appearance.\n  // It is best to copy the component in `placeholder-renderer-default.js` to use as a base,\n  // and customize as needed.\n  placeholderRenderer: PropTypes.func,\n\n  theme: PropTypes.shape({\n    style: PropTypes.shape({}),\n    innerStyle: PropTypes.shape({}),\n    reactVirtualizedListProps: PropTypes.shape({}),\n    scaffoldBlockPxWidth: PropTypes.number,\n    slideRegionSize: PropTypes.number,\n    rowHeight: PropTypes.oneOfType([PropTypes.number, PropTypes.func]),\n    treeNodeRenderer: PropTypes.func,\n    nodeContentRenderer: PropTypes.func,\n    placeholderRenderer: PropTypes.func,\n  }),\n\n  // Determine the unique key used to identify each node and\n  // generate the `path` array passed in callbacks.\n  // By default, returns the index in the tree (omitting hidden nodes).\n  getNodeKey: PropTypes.func,\n\n  // Called whenever tree data changed.\n  // Just like with React input elements, you have to update your\n  // own component's data to see the changes reflected.\n  onChange: PropTypes.func.isRequired,\n\n  // Called after node move operation.\n  onMoveNode: PropTypes.func,\n\n  // Determine whether a node can be dragged. Set to false to disable dragging on all nodes.\n  canDrag: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\n\n  // Determine whether a node can be dropped based on its path and parents'.\n  canDrop: PropTypes.func,\n\n  // When true, or a callback returning true, dropping nodes to react-dnd\n  // drop targets outside of this tree will not remove them from this tree\n  shouldCopyOnOutsideDrop: PropTypes.oneOfType([\n    PropTypes.func,\n    PropTypes.bool,\n  ]),\n\n  // Called after children nodes collapsed or expanded.\n  onVisibilityToggle: PropTypes.func,\n\n  dndType: PropTypes.string,\n\n  // Called to track between dropped and dragging\n  onDragStateChanged: PropTypes.func,\n\n  // Specify that nodes that do not match search will be collapsed\n  onlyExpandSearchedNodes: PropTypes.bool,\n};\n\nReactSortableTree.defaultProps = {\n  canDrag: true,\n  canDrop: null,\n  className: '',\n  dndType: null,\n  generateNodeProps: null,\n  getNodeKey: defaultGetNodeKey,\n  innerStyle: {},\n  isVirtualized: true,\n  maxDepth: null,\n  treeNodeRenderer: null,\n  nodeContentRenderer: null,\n  onMoveNode: () => {},\n  onVisibilityToggle: () => {},\n  placeholderRenderer: null,\n  reactVirtualizedListProps: {},\n  rowHeight: null,\n  scaffoldBlockPxWidth: null,\n  searchFinishCallback: null,\n  searchFocusOffset: null,\n  searchMethod: null,\n  searchQuery: null,\n  shouldCopyOnOutsideDrop: false,\n  slideRegionSize: null,\n  style: {},\n  theme: {},\n  onDragStateChanged: () => {},\n  onlyExpandSearchedNodes: false,\n};\n\nReactSortableTree.contextTypes = {\n  dragDropManager: PropTypes.shape({}),\n};\n\n// Export the tree component without the react-dnd DragDropContext,\n// for when component is used with other components using react-dnd.\n// see: https://github.com/gaearon/react-dnd/issues/186\nexport { ReactSortableTree as SortableTreeWithoutDndContext };\n\nexport default DndManager.wrapRoot(ReactSortableTree);\n\n\n\n// WEBPACK FOOTER //\n// ./src/react-sortable-tree.js","module.exports = require(\"react-virtualized\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"react-virtualized\"\n// module id = 8\n// module chunks = 0","module.exports = require(\"lodash.isequal\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lodash.isequal\"\n// module id = 9\n// module chunks = 0","module.exports = require(\"react-dnd-scrollzone\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"react-dnd-scrollzone\"\n// module id = 10\n// module chunks = 0","// removed by extract-text-webpack-plugin\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/react-virtualized/styles.css\n// module id = 11\n// module chunks = 0","import React, { Component, Children, cloneElement } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from './utils/classnames';\nimport './tree-node.css';\n\nclass TreeNode extends Component {\n  render() {\n    const {\n      children,\n      listIndex,\n      swapFrom,\n      swapLength,\n      swapDepth,\n      scaffoldBlockPxWidth,\n      lowerSiblingCounts,\n      connectDropTarget,\n      isOver,\n      draggedNode,\n      canDrop,\n      treeIndex,\n      treeId, // Delete from otherProps\n      getPrevRow, // Delete from otherProps\n      node, // Delete from otherProps\n      path, // Delete from otherProps\n      ...otherProps\n    } = this.props;\n\n    // Construct the scaffold representing the structure of the tree\n    const scaffoldBlockCount = lowerSiblingCounts.length;\n    const scaffold = [];\n    lowerSiblingCounts.forEach((lowerSiblingCount, i) => {\n      let lineClass = '';\n      if (lowerSiblingCount > 0) {\n        // At this level in the tree, the nodes had sibling nodes further down\n\n        if (listIndex === 0) {\n          // Top-left corner of the tree\n          // +-----+\n          // |     |\n          // |  +--+\n          // |  |  |\n          // +--+--+\n          lineClass =\n            'rst__lineHalfHorizontalRight rst__lineHalfVerticalBottom';\n        } else if (i === scaffoldBlockCount - 1) {\n          // Last scaffold block in the row, right before the row content\n          // +--+--+\n          // |  |  |\n          // |  +--+\n          // |  |  |\n          // +--+--+\n          lineClass = 'rst__lineHalfHorizontalRight rst__lineFullVertical';\n        } else {\n          // Simply connecting the line extending down to the next sibling on this level\n          // +--+--+\n          // |  |  |\n          // |  |  |\n          // |  |  |\n          // +--+--+\n          lineClass = 'rst__lineFullVertical';\n        }\n      } else if (listIndex === 0) {\n        // Top-left corner of the tree, but has no siblings\n        // +-----+\n        // |     |\n        // |  +--+\n        // |     |\n        // +-----+\n        lineClass = 'rst__lineHalfHorizontalRight';\n      } else if (i === scaffoldBlockCount - 1) {\n        // The last or only node in this level of the tree\n        // +--+--+\n        // |  |  |\n        // |  +--+\n        // |     |\n        // +-----+\n        lineClass = 'rst__lineHalfVerticalTop rst__lineHalfHorizontalRight';\n      }\n\n      scaffold.push(\n        <div\n          key={`pre_${1 + i}`}\n          style={{ width: scaffoldBlockPxWidth }}\n          className={`${'rst__lineBlock'} ${lineClass}`}\n        />\n      );\n\n      if (treeIndex !== listIndex && i === swapDepth) {\n        // This row has been shifted, and is at the depth of\n        // the line pointing to the new destination\n        let highlightLineClass = '';\n\n        if (listIndex === swapFrom + swapLength - 1) {\n          // This block is on the bottom (target) line\n          // This block points at the target block (where the row will go when released)\n          highlightLineClass = 'rst__highlightBottomLeftCorner';\n        } else if (treeIndex === swapFrom) {\n          // This block is on the top (source) line\n          highlightLineClass = 'rst__highlightTopLeftCorner';\n        } else {\n          // This block is between the bottom and top\n          highlightLineClass = 'rst__highlightLineVertical';\n        }\n\n        scaffold.push(\n          <div\n            // eslint-disable-next-line react/no-array-index-key\n            key={i}\n            style={{\n              width: scaffoldBlockPxWidth,\n              left: scaffoldBlockPxWidth * i,\n            }}\n            className={classnames('rst__absoluteLineBlock', highlightLineClass)}\n          />\n        );\n      }\n    });\n\n    return connectDropTarget(\n      <div {...otherProps} className=\"rst__node\">\n        {scaffold}\n\n        <div\n          className=\"rst__nodeContent\"\n          style={{ left: scaffoldBlockPxWidth * scaffoldBlockCount }}\n        >\n          {Children.map(children, child =>\n            cloneElement(child, {\n              isOver,\n              canDrop,\n              draggedNode,\n            })\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nTreeNode.defaultProps = {\n  swapFrom: null,\n  swapDepth: null,\n  swapLength: null,\n  canDrop: false,\n  draggedNode: null,\n};\n\nTreeNode.propTypes = {\n  treeIndex: PropTypes.number.isRequired,\n  treeId: PropTypes.string.isRequired,\n  swapFrom: PropTypes.number,\n  swapDepth: PropTypes.number,\n  swapLength: PropTypes.number,\n  scaffoldBlockPxWidth: PropTypes.number.isRequired,\n  lowerSiblingCounts: PropTypes.arrayOf(PropTypes.number).isRequired,\n\n  listIndex: PropTypes.number.isRequired,\n  children: PropTypes.node.isRequired,\n\n  // Drop target\n  connectDropTarget: PropTypes.func.isRequired,\n  isOver: PropTypes.bool.isRequired,\n  canDrop: PropTypes.bool,\n  draggedNode: PropTypes.shape({}),\n\n  // used in dndManager\n  getPrevRow: PropTypes.func.isRequired,\n  node: PropTypes.shape({}).isRequired,\n  path: PropTypes.arrayOf(\n    PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n  ).isRequired,\n};\n\nexport default TreeNode;\n\n\n\n// WEBPACK FOOTER //\n// ./src/tree-node.js","// removed by extract-text-webpack-plugin\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/tree-node.css\n// module id = 13\n// module chunks = 0","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { isDescendant } from './utils/tree-data-utils';\nimport classnames from './utils/classnames';\nimport './node-renderer-default.css';\n\nclass NodeRendererDefault extends Component {\n  render() {\n    const {\n      scaffoldBlockPxWidth,\n      toggleChildrenVisibility,\n      connectDragPreview,\n      connectDragSource,\n      isDragging,\n      canDrop,\n      canDrag,\n      node,\n      title,\n      subtitle,\n      draggedNode,\n      path,\n      treeIndex,\n      isSearchMatch,\n      isSearchFocus,\n      buttons,\n      className,\n      style,\n      didDrop,\n      treeId,\n      isOver, // Not needed, but preserved for other renderers\n      parentNode, // Needed for dndManager\n      ...otherProps\n    } = this.props;\n    const nodeTitle = title || node.title;\n    const nodeSubtitle = subtitle || node.subtitle;\n\n    let handle;\n    if (canDrag) {\n      if (typeof node.children === 'function' && node.expanded) {\n        // Show a loading symbol on the handle when the children are expanded\n        //  and yet still defined by a function (a callback to fetch the children)\n        handle = (\n          <div className=\"rst__loadingHandle\">\n            <div className=\"rst__loadingCircle\">\n              {[...new Array(12)].map((_, index) => (\n                <div\n                  // eslint-disable-next-line react/no-array-index-key\n                  key={index}\n                  className=\"rst__loadingCirclePoint\"\n                />\n              ))}\n            </div>\n          </div>\n        );\n      } else {\n        // Show the handle used to initiate a drag-and-drop\n        handle = connectDragSource(<div className=\"rst__moveHandle\" />, {\n          dropEffect: 'copy',\n        });\n      }\n    }\n\n    const isDraggedDescendant = draggedNode && isDescendant(draggedNode, node);\n    const isLandingPadActive = !didDrop && isDragging;\n\n    return (\n      <div style={{ height: '100%' }} {...otherProps}>\n        {toggleChildrenVisibility &&\n          node.children &&\n          (node.children.length > 0 || typeof node.children === 'function') && (\n            <div>\n              <button\n                type=\"button\"\n                aria-label={node.expanded ? 'Collapse' : 'Expand'}\n                className={\n                  node.expanded ? 'rst__collapseButton' : 'rst__expandButton'\n                }\n                style={{ left: -0.5 * scaffoldBlockPxWidth }}\n                onClick={() =>\n                  toggleChildrenVisibility({\n                    node,\n                    path,\n                    treeIndex,\n                  })\n                }\n              />\n\n              {node.expanded &&\n                !isDragging && (\n                  <div\n                    style={{ width: scaffoldBlockPxWidth }}\n                    className=\"rst__lineChildren\"\n                  />\n                )}\n            </div>\n          )}\n\n        <div className=\"rst__rowWrapper\">\n          {/* Set the row preview to be used during drag and drop */}\n          {connectDragPreview(\n            <div\n              className={classnames(\n                'rst__row',\n                isLandingPadActive && 'rst__rowLandingPad',\n                isLandingPadActive && !canDrop && 'rst__rowCancelPad',\n                isSearchMatch && 'rst__rowSearchMatch',\n                isSearchFocus && 'rst__rowSearchFocus',\n                className\n              )}\n              style={{\n                opacity: isDraggedDescendant ? 0.5 : 1,\n                ...style,\n              }}\n            >\n              {handle}\n\n              <div\n                className={classnames(\n                  'rst__rowContents',\n                  !canDrag && 'rst__rowContentsDragDisabled'\n                )}\n              >\n                <div className=\"rst__rowLabel\">\n                  <span\n                    className={classnames(\n                      'rst__rowTitle',\n                      node.subtitle && 'rst__rowTitleWithSubtitle'\n                    )}\n                  >\n                    {typeof nodeTitle === 'function'\n                      ? nodeTitle({\n                          node,\n                          path,\n                          treeIndex,\n                        })\n                      : nodeTitle}\n                  </span>\n\n                  {nodeSubtitle && (\n                    <span className=\"rst__rowSubtitle\">\n                      {typeof nodeSubtitle === 'function'\n                        ? nodeSubtitle({\n                            node,\n                            path,\n                            treeIndex,\n                          })\n                        : nodeSubtitle}\n                    </span>\n                  )}\n                </div>\n\n                <div className=\"rst__rowToolbar\">\n                  {buttons.map((btn, index) => (\n                    <div\n                      key={index} // eslint-disable-line react/no-array-index-key\n                      className=\"rst__toolbarButton\"\n                    >\n                      {btn}\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nNodeRendererDefault.defaultProps = {\n  isSearchMatch: false,\n  isSearchFocus: false,\n  canDrag: false,\n  toggleChildrenVisibility: null,\n  buttons: [],\n  className: '',\n  style: {},\n  parentNode: null,\n  draggedNode: null,\n  canDrop: false,\n  title: null,\n  subtitle: null,\n};\n\nNodeRendererDefault.propTypes = {\n  node: PropTypes.shape({}).isRequired,\n  title: PropTypes.oneOfType([PropTypes.func, PropTypes.node]),\n  subtitle: PropTypes.oneOfType([PropTypes.func, PropTypes.node]),\n  path: PropTypes.arrayOf(\n    PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n  ).isRequired,\n  treeIndex: PropTypes.number.isRequired,\n  treeId: PropTypes.string.isRequired,\n  isSearchMatch: PropTypes.bool,\n  isSearchFocus: PropTypes.bool,\n  canDrag: PropTypes.bool,\n  scaffoldBlockPxWidth: PropTypes.number.isRequired,\n  toggleChildrenVisibility: PropTypes.func,\n  buttons: PropTypes.arrayOf(PropTypes.node),\n  className: PropTypes.string,\n  style: PropTypes.shape({}),\n\n  // Drag and drop API functions\n  // Drag source\n  connectDragPreview: PropTypes.func.isRequired,\n  connectDragSource: PropTypes.func.isRequired,\n  parentNode: PropTypes.shape({}), // Needed for dndManager\n  isDragging: PropTypes.bool.isRequired,\n  didDrop: PropTypes.bool.isRequired,\n  draggedNode: PropTypes.shape({}),\n  // Drop target\n  isOver: PropTypes.bool.isRequired,\n  canDrop: PropTypes.bool,\n};\n\nexport default NodeRendererDefault;\n\n\n\n// WEBPACK FOOTER //\n// ./src/node-renderer-default.js","// removed by extract-text-webpack-plugin\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/node-renderer-default.css\n// module id = 15\n// module chunks = 0","import React, { Children, cloneElement, Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass TreePlaceholder extends Component {\n  render() {\n    const {\n      children,\n      connectDropTarget,\n      treeId,\n      drop,\n      ...otherProps\n    } = this.props;\n    return connectDropTarget(\n      <div>\n        {Children.map(children, child =>\n          cloneElement(child, {\n            ...otherProps,\n          })\n        )}\n      </div>\n    );\n  }\n}\n\nTreePlaceholder.defaultProps = {\n  canDrop: false,\n  draggedNode: null,\n};\n\nTreePlaceholder.propTypes = {\n  children: PropTypes.node.isRequired,\n\n  // Drop target\n  connectDropTarget: PropTypes.func.isRequired,\n  isOver: PropTypes.bool.isRequired,\n  canDrop: PropTypes.bool,\n  draggedNode: PropTypes.shape({}),\n  treeId: PropTypes.string.isRequired,\n  drop: PropTypes.func.isRequired,\n};\n\nexport default TreePlaceholder;\n\n\n\n// WEBPACK FOOTER //\n// ./src/tree-placeholder.js","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from './utils/classnames';\nimport './placeholder-renderer-default.css';\n\nconst PlaceholderRendererDefault = ({ isOver, canDrop }) => (\n  <div\n    className={classnames(\n      'rst__placeholder',\n      canDrop && 'rst__placeholderLandingPad',\n      canDrop && !isOver && 'rst__placeholderCancelPad'\n    )}\n  />\n);\n\nPlaceholderRendererDefault.defaultProps = {\n  isOver: false,\n  canDrop: false,\n};\n\nPlaceholderRendererDefault.propTypes = {\n  isOver: PropTypes.bool,\n  canDrop: PropTypes.bool,\n};\n\nexport default PlaceholderRendererDefault;\n\n\n\n// WEBPACK FOOTER //\n// ./src/placeholder-renderer-default.js","// removed by extract-text-webpack-plugin\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/placeholder-renderer-default.css\n// module id = 18\n// module chunks = 0","/* eslint-disable import/prefer-default-export */\n\nexport function slideRows(rows, fromIndex, toIndex, count = 1) {\n  const rowsWithoutMoved = [\n    ...rows.slice(0, fromIndex),\n    ...rows.slice(fromIndex + count),\n  ];\n\n  return [\n    ...rowsWithoutMoved.slice(0, toIndex),\n    ...rows.slice(fromIndex, fromIndex + count),\n    ...rowsWithoutMoved.slice(toIndex),\n  ];\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/utils/generic-utils.js","import {\n  DragDropContext as dragDropContext,\n  DragSource as dragSource,\n  DropTarget as dropTarget,\n} from 'react-dnd';\nimport HTML5Backend from 'react-dnd-html5-backend';\nimport { findDOMNode } from 'react-dom';\nimport { getDepth } from './tree-data-utils';\nimport { memoizedInsertNode } from './memoized-tree-data-utils';\n\nexport default class DndManager {\n  constructor(treeRef) {\n    this.treeRef = treeRef;\n  }\n\n  static wrapRoot(el) {\n    return dragDropContext(HTML5Backend)(el);\n  }\n\n  get startDrag() {\n    return this.treeRef.startDrag;\n  }\n\n  get dragHover() {\n    return this.treeRef.dragHover;\n  }\n\n  get endDrag() {\n    return this.treeRef.endDrag;\n  }\n\n  get drop() {\n    return this.treeRef.drop;\n  }\n\n  get treeId() {\n    return this.treeRef.treeId;\n  }\n\n  get dndType() {\n    return this.treeRef.dndType;\n  }\n\n  get treeData() {\n    return this.treeRef.state.draggingTreeData || this.treeRef.props.treeData;\n  }\n\n  get getNodeKey() {\n    return this.treeRef.props.getNodeKey;\n  }\n\n  get customCanDrop() {\n    return this.treeRef.props.canDrop;\n  }\n\n  get maxDepth() {\n    return this.treeRef.props.maxDepth;\n  }\n\n  getTargetDepth(dropTargetProps, monitor, component) {\n    let dropTargetDepth = 0;\n\n    const rowAbove = dropTargetProps.getPrevRow();\n    if (rowAbove) {\n      // Limit the length of the path to the deepest possible\n      dropTargetDepth = Math.min(\n        rowAbove.path.length,\n        dropTargetProps.path.length\n      );\n    }\n\n    let blocksOffset;\n    let dragSourceInitialDepth = (monitor.getItem().path || []).length;\n\n    // When adding node from external source\n    if (monitor.getItem().treeId !== this.treeId) {\n      // Ignore the tree depth of the source, if it had any to begin with\n      dragSourceInitialDepth = 0;\n\n      if (component) {\n        const relativePosition = findDOMNode(component).getBoundingClientRect(); // eslint-disable-line react/no-find-dom-node\n        const leftShift =\n          monitor.getSourceClientOffset().x - relativePosition.left;\n        blocksOffset = Math.round(\n          leftShift / dropTargetProps.scaffoldBlockPxWidth\n        );\n      } else {\n        blocksOffset = dropTargetProps.path.length;\n      }\n    } else {\n      blocksOffset = Math.round(\n        monitor.getDifferenceFromInitialOffset().x /\n          dropTargetProps.scaffoldBlockPxWidth\n      );\n    }\n\n    let targetDepth = Math.min(\n      dropTargetDepth,\n      Math.max(0, dragSourceInitialDepth + blocksOffset - 1)\n    );\n\n    // If a maxDepth is defined, constrain the target depth\n    if (typeof this.maxDepth !== 'undefined' && this.maxDepth !== null) {\n      const draggedNode = monitor.getItem().node;\n      const draggedChildDepth = getDepth(draggedNode);\n\n      targetDepth = Math.max(\n        0,\n        Math.min(targetDepth, this.maxDepth - draggedChildDepth - 1)\n      );\n    }\n\n    return targetDepth;\n  }\n\n  canDrop(dropTargetProps, monitor) {\n    if (!monitor.isOver()) {\n      return false;\n    }\n\n    const rowAbove = dropTargetProps.getPrevRow();\n    const abovePath = rowAbove ? rowAbove.path : [];\n    const aboveNode = rowAbove ? rowAbove.node : {};\n    const targetDepth = this.getTargetDepth(dropTargetProps, monitor, null);\n\n    // Cannot drop if we're adding to the children of the row above and\n    //  the row above is a function\n    if (\n      targetDepth >= abovePath.length &&\n      typeof aboveNode.children === 'function'\n    ) {\n      return false;\n    }\n\n    if (typeof this.customCanDrop === 'function') {\n      const { node } = monitor.getItem();\n      const addedResult = memoizedInsertNode({\n        treeData: this.treeData,\n        newNode: node,\n        depth: targetDepth,\n        getNodeKey: this.getNodeKey,\n        minimumTreeIndex: dropTargetProps.listIndex,\n        expandParent: true,\n      });\n\n      return this.customCanDrop({\n        node,\n        prevPath: monitor.getItem().path,\n        prevParent: monitor.getItem().parentNode,\n        prevTreeIndex: monitor.getItem().treeIndex, // Equals -1 when dragged from external tree\n        nextPath: addedResult.path,\n        nextParent: addedResult.parentNode,\n        nextTreeIndex: addedResult.treeIndex,\n      });\n    }\n\n    return true;\n  }\n\n  wrapSource(el) {\n    const nodeDragSource = {\n      beginDrag: props => {\n        this.startDrag(props);\n\n        return {\n          node: props.node,\n          parentNode: props.parentNode,\n          path: props.path,\n          treeIndex: props.treeIndex,\n          treeId: props.treeId,\n        };\n      },\n\n      endDrag: (props, monitor) => {\n        this.endDrag(monitor.getDropResult());\n      },\n\n      isDragging: (props, monitor) => {\n        const dropTargetNode = monitor.getItem().node;\n        const draggedNode = props.node;\n\n        return draggedNode === dropTargetNode;\n      },\n    };\n\n    function nodeDragSourcePropInjection(connect, monitor) {\n      return {\n        connectDragSource: connect.dragSource(),\n        connectDragPreview: connect.dragPreview(),\n        isDragging: monitor.isDragging(),\n        didDrop: monitor.didDrop(),\n      };\n    }\n\n    return dragSource(\n      this.dndType,\n      nodeDragSource,\n      nodeDragSourcePropInjection\n    )(el);\n  }\n\n  wrapTarget(el) {\n    const nodeDropTarget = {\n      drop: (dropTargetProps, monitor, component) => {\n        const result = {\n          node: monitor.getItem().node,\n          path: monitor.getItem().path,\n          treeIndex: monitor.getItem().treeIndex,\n          treeId: this.treeId,\n          minimumTreeIndex: dropTargetProps.treeIndex,\n          depth: this.getTargetDepth(dropTargetProps, monitor, component),\n        };\n\n        this.drop(result);\n\n        return result;\n      },\n\n      hover: (dropTargetProps, monitor, component) => {\n        const targetDepth = this.getTargetDepth(\n          dropTargetProps,\n          monitor,\n          component\n        );\n        const draggedNode = monitor.getItem().node;\n        const needsRedraw =\n          // Redraw if hovered above different nodes\n          dropTargetProps.node !== draggedNode ||\n          // Or hovered above the same node but at a different depth\n          targetDepth !== dropTargetProps.path.length - 1;\n\n        if (!needsRedraw) {\n          return;\n        }\n\n        this.dragHover({\n          node: draggedNode,\n          path: monitor.getItem().path,\n          minimumTreeIndex: dropTargetProps.listIndex,\n          depth: targetDepth,\n        });\n      },\n\n      canDrop: this.canDrop.bind(this),\n    };\n\n    function nodeDropTargetPropInjection(connect, monitor) {\n      const dragged = monitor.getItem();\n      return {\n        connectDropTarget: connect.dropTarget(),\n        isOver: monitor.isOver(),\n        canDrop: monitor.canDrop(),\n        draggedNode: dragged ? dragged.node : null,\n      };\n    }\n\n    return dropTarget(\n      this.dndType,\n      nodeDropTarget,\n      nodeDropTargetPropInjection\n    )(el);\n  }\n\n  wrapPlaceholder(el) {\n    const placeholderDropTarget = {\n      drop: (dropTargetProps, monitor) => {\n        const { node, path, treeIndex } = monitor.getItem();\n        const result = {\n          node,\n          path,\n          treeIndex,\n          treeId: this.treeId,\n          minimumTreeIndex: 0,\n          depth: 0,\n        };\n\n        this.drop(result);\n\n        return result;\n      },\n    };\n\n    function placeholderPropInjection(connect, monitor) {\n      const dragged = monitor.getItem();\n      return {\n        connectDropTarget: connect.dropTarget(),\n        isOver: monitor.isOver(),\n        canDrop: monitor.canDrop(),\n        draggedNode: dragged ? dragged.node : null,\n      };\n    }\n\n    return dropTarget(\n      this.dndType,\n      placeholderDropTarget,\n      placeholderPropInjection\n    )(el);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/utils/dnd-manager.js","module.exports = require(\"react-dnd\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"react-dnd\"\n// module id = 21\n// module chunks = 0","module.exports = require(\"react-dnd-html5-backend\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"react-dnd-html5-backend\"\n// module id = 22\n// module chunks = 0","module.exports = require(\"react-dom\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"react-dom\"\n// module id = 23\n// module chunks = 0","// removed by extract-text-webpack-plugin\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/react-sortable-tree.css\n// module id = 24\n// module chunks = 0"],"sourceRoot":""}